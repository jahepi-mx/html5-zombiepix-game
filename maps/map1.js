class Map1 extends Map {
    
    constructor(rows, cols, startX, startY) {
        super(rows, cols, startX, startY);
    }
    
    init() {
        
        this.map = [

        ];
        
        this.tileMap = [];
        this.enemies = [];
        this.deadZombies = [];
        this.items = [];
        this.maxCorpses = 10;

        for (var a = 0; a < this.rows * this.cols; a++) {
            var x = a % this.cols;
            var y = Math.floor(a / this.cols);
            if (this.map[a] === CRATE_TYPE || this.map[a] === CRATE_TYPE_NO_ITEM) {
                this.tileMap[a] = new Crate(x, y, this.tileWidth, this.tileHeight, this, this.map[a] === CRATE_TYPE);
            } else if (this.map[a] === BARREL_TYPE) {
                this.tileMap[a] = new Barrel(x, y, this.tileWidth, this.tileHeight, this);
            } else if (this.map[a] === EXIT_TYPE) {
                this.tileMap[a] = new Exit(x, y, this.tileWidth, this.tileHeight, this);
            } else {
                this.tileMap[a] = new Tile(x, y, this.tileWidth, this.tileHeight, this.map[a]);
            }
        }
        
        var zombieKillerWidth = this.tileWidth * 0.5;
        var zombieKillerHeight = this.tileHeight * 0.5;
        
        var canvasWidth = Config.getInstance().canvasWidth;
        var canvasHeight = Config.getInstance().canvasHeight;
        var xOffset = canvasWidth / 2 - zombieKillerWidth / 2;
        var yOffset = canvasHeight / 2 - zombieKillerHeight / 2;
        var origX = this.startX * this.tileWidth;
        var origY = this.startY * this.tileHeight;
        var newOffsetX = xOffset - origX - this.tileWidth / 2 + zombieKillerWidth / 2;
        var newOffsetY = yOffset - origY - this.tileHeight / 2 + zombieKillerHeight / 2;
        
        this.zombieKiller = new ZombieKiller(xOffset, yOffset, zombieKillerWidth, zombieKillerHeight, this);
        this.camera.init(5, 4, newOffsetX, newOffsetY);
        
        this.items.push(new Life(7 * this.tileWidth, 5 * this.tileHeight, this.tileWidth * 0.6, this.tileHeight * 0.6, this));
        
        
        var zombieSize = this.tileWidth * 0.8;
        this.enemies.push(new Zombie(18 * this.tileWidth + this.tileWidth / 2, 6 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 10, 10, 1));
        
        this.enemies.push(new Zombie(15 * this.tileWidth + this.tileWidth / 2, 19 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.2, 10, 2, 1));
        this.enemies.push(new Zombie(16 * this.tileWidth + this.tileWidth / 2, 21 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 10, 2, 1));
        this.enemies.push(new Zombie(21 * this.tileWidth + this.tileWidth / 2, 21 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.1, 10, 2, 1));
        this.enemies.push(new Zombie(19 * this.tileWidth + this.tileWidth / 2, 19 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.8, 10, 2, 1));
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 16 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.6, 10, 2, 1));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 21 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.9, 10, 2, 1));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 16 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 10, 2, 1));
        this.enemies.push(new Zombie(20 * this.tileWidth + this.tileWidth / 2, 20 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.7, 10, 2, 1));
        
        zombieSize = this.tileWidth * 0.9;
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 30 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 20, 1, 1));
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 30 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 20, 1, 1));
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 29 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.7, 20, 1, 1));
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 29 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 20, 1, 1));
        
        var eyeSize = this.tileWidth * 1.2;
        this.enemies.push(new Eye(25 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 34 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 1, this.tileWidth * 4.75));
        this.enemies.push(new Eye(29 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 34 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 0.6, this.tileWidth * 6.75));
        this.enemies.push(new Eye(25 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 37 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 1, this.tileWidth * 4.75));
        this.enemies.push(new Eye(29 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 37 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 0.6, this.tileWidth * 6.75));
        
        zombieSize = this.tileWidth * 1.2;
        this.enemies.push(new Zombie(22 * this.tileWidth + this.tileWidth / 2, 34 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.2, 25, 2, 1));
        this.enemies.push(new Zombie(26 * this.tileWidth + this.tileWidth / 2, 32 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.3, 25, 1, 1));
        this.enemies.push(new Zombie(29 * this.tileWidth + this.tileWidth / 2, 32 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.1, 25, 2, 1));
        this.enemies.push(new Zombie(27 * this.tileWidth + this.tileWidth / 2, 37 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.4, 25, 1, 1));
        this.enemies.push(new Zombie(23 * this.tileWidth + this.tileWidth / 2, 40 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 25, 2, 1));
        this.enemies.push(new Zombie(26 * this.tileWidth + this.tileWidth / 2, 40 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.6, 25, 1, 1));
        this.enemies.push(new Zombie(26 * this.tileWidth + this.tileWidth / 2, 42 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 25, 2, 1));
        this.enemies.push(new Zombie(30 * this.tileWidth + this.tileWidth / 2, 41 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.1, 25, 2, 1));
        this.enemies.push(new Zombie(28 * this.tileWidth + this.tileWidth / 2, 38 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.7, 25, 1, 1));
        this.enemies.push(new Zombie(23 * this.tileWidth + this.tileWidth / 2, 36 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.4, 25, 1, 1));
        
        zombieSize = this.tileWidth * 1.5;
        
        this.enemies.push(new Zombie(46 * this.tileWidth + this.tileWidth / 2, 36 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 50, 0.5, 2));
        this.enemies.push(new Zombie(46 * this.tileWidth + this.tileWidth / 2, 40 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.1, 50, 1, 2));
        this.enemies.push(new Zombie(42 * this.tileWidth + this.tileWidth / 2, 34 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.2, 50, 0.5, 2));
        this.enemies.push(new Zombie(46 * this.tileWidth + this.tileWidth / 2, 33 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.8, 50, 1, 2));
        this.enemies.push(new Zombie(49 * this.tileWidth + this.tileWidth / 2, 41 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.9, 50, 0.5, 2));
        
        
        /*
        
        eyeSize = this.tileWidth;
        this.enemies.push(new MovingEye(16 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 16 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this));
        this.enemies.push(new ZombieSnake(16 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 16 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this));
        */
        this.events = [new BossFightEvent(this)];
    }
}


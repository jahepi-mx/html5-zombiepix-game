class Map2 extends Map {
    
    constructor(rows, cols, startX, startY) {
        super(rows, cols, startX, startY);
    }
    
    init() {
        
        this.map = [
            19, 18, 18, 18, 16, 47, 47, 47, 47, 47, 47, 47, 47, 15, 18, 13, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 18, 18, 19, 19, 19, 47, 47, 47, 47, 48, 47, 47, 47, 15, 15, 13, 16, 47, 47, 54, 47, 47, 47, 54, 47, 47, 54, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 18, 16, 19, 16, 47, 47, 47, 47, 47, 47, 48, 47, 16, 13, 13, 19, 48, 47, 54, 47, 47, 47, 54, 47, 47, 54, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 19, 18, 18, 18, 54, 54, 54, 48, 54, 47, 54, 47, 13, 20, 13, 17, 47, 49, 54, 48, 47, 49, 54, 47, 49, 54, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 16, 19, 19, 16, 14, 54, 49, 54, 47, 54, 49, 54, 54, 7, 58, 8, 7, 7, 12, 7, 7, 31, 30, 30, 30, 30, 29, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 31, 30, 30, 30, 29, 7, 12, 7, 7, 7, 8, 7, 7, 7, 58, 45, 45, 45, 45, 45, 12, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 48, 48, 48, 48, 48, 24, 25, 25, 25, 25, 25, 25, 29, 46, 46, 46, 46, 46, 46, 44, 58, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 54, 48, 54, 48, 54, 47, 48, 48, 47, 48, 47, 47, 48, 7, 7, 45, 45, 45, 45, 58, 58, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 48, 49, 54, 49, 48, 48, 47, 48, 47, 47, 48, 47, 47, 7, 7, 7, 6, 7, 7, 7, 12, 50, 52, 50, 50, 52, 50, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 7, 7, 7, 7, 7, 47, 47, 47, 47, 47, 47, 47, 48, 7, 7, 44, 31, 25, 25, 25, 29, 31, 35, 35, 35, 35, 29, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 31, 30, 30, 30, 30, 30, 30, 29, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 11, 3, 7, 23, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 23, 7, 7, 8, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 1, 7, 7, 23, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 23, 7, 9, 4, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 5, 7, 7, 23, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 23, 7, 7, 8, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 11, 2, 7, 23, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 22, 22, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 23, 7, 6, 10, 51, 52, 51, 52, 50, 48, 49, 48, 48, 49, 48, 18, 18, 14, 18, 15, 14, 18, 20, 15, 18, 18, 15, 50, 50, 52, 50, 50, 52, 50, 50, 22, 22, 22, 22, 22, 22, 22, 22, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 22, 23, 7, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 25, 25, 25, 25, 25, 25, 29, 22, 22, 22, 22, 22, 22, 22, 22, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 41, 22, 22, 7, 58, 7, 12, 7, 7, 7, 7, 22, 7, 44, 1, 22, 7, 7, 7, 7, 22, 7, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 23, 23, 7, 23, 23, 23, 7, 22, 1, 23, 23, 22, 23, 23, 23, 7, 22, 7, 23, 23, 23, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 1, 22, 7, 22, 44, 22, 7, 22, 45, 22, 7, 7, 7, 7, 22, 7, 1, 7, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 23, 23, 22, 7, 22, 6, 7, 7, 22, 45, 22, 7, 23, 23, 7, 22, 23, 23, 23, 23, 23, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 3, 22, 7, 7, 22, 23, 23, 23, 22, 45, 22, 7, 22, 7, 7, 58, 44, 7, 7, 7, 22, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 23, 22, 7, 7, 7, 7, 45, 22, 7, 22, 23, 23, 23, 23, 23, 23, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 22, 7, 7, 23, 23, 23, 45, 22, 7, 7, 7, 7, 7, 22, 2, 22, 7, 23, 23, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 58, 7, 22, 11, 7, 22, 7, 22, 45, 22, 23, 23, 58, 23, 7, 7, 7, 22, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 23, 23, 22, 7, 7, 22, 7, 22, 45, 22, 7, 7, 7, 22, 23, 23, 23, 22, 23, 23, 58, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 7, 7, 7, 22, 7, 22, 7, 22, 23, 23, 7, 7, 7, 22, 7, 7, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 23, 23, 7, 7, 22, 7, 7, 7, 22, 7, 22, 23, 23, 7, 22, 7, 23, 23, 23, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 7, 8, 22, 7, 7, 22, 23, 23, 7, 22, 7, 45, 5, 7, 7, 22, 7, 22, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 23, 23, 22, 7, 7, 22, 4, 22, 7, 22, 7, 23, 7, 23, 23, 22, 7, 22, 7, 23, 58, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 7, 7, 58, 7, 7, 22, 7, 22, 7, 22, 4, 22, 7, 22, 7, 7, 7, 7, 7, 22, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 23, 23, 23, 23, 7, 7, 22, 7, 22, 7, 22, 7, 22, 7, 22, 23, 23, 23, 7, 7, 22, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 7, 7, 7, 7, 7, 22, 7, 22, 7, 22, 7, 22, 7, 22, 44, 22, 45, 7, 7, 22, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 23, 23, 23, 23, 23, 23, 22, 7, 22, 7, 22, 7, 22, 45, 22, 7, 22, 45, 23, 23, 22, 23, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 7, 7, 22, 7, 7, 22, 7, 7, 7, 22, 7, 22, 7, 22, 7, 22, 45, 7, 7, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 23, 7, 22, 23, 7, 58, 7, 23, 23, 22, 23, 22, 12, 22, 7, 22, 45, 23, 23, 23, 23, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 7, 7, 7, 44, 7, 22, 7, 7, 7, 7, 7, 22, 7, 22, 45, 22, 3, 7, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 23, 23, 23, 23, 7, 22, 7, 23, 23, 23, 23, 22, 7, 22, 45, 22, 23, 23, 7, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 7, 22, 7, 8, 22, 7, 7, 7, 22, 7, 22, 7, 7, 7, 7, 7, 22, 45, 22, 2, 7, 7, 22, 22, 22, 48, 47, 49, 47, 48, 49, 47, 48, 22, 22, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 45, 22, 23, 23, 22, 23, 23, 23, 22, 7, 22, 7, 23, 23, 7, 7, 22, 7, 22, 7, 23, 23, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 25, 25, 29, 23, 23, 23, 23, 23, 23, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 45, 45, 45, 7, 7, 7, 7, 7, 5, 7, 58, 58, 22, 11, 7, 7, 22, 7, 7, 7, 7, 7, 8, 7, 7, 10, 12, 7, 22, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 58, 22, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 18, 18, 18, 18, 18, 20, 18, 18, 18, 18, 18, 14, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 58, 22, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 4, 7, 5, 7, 7, 2, 7, 7, 7, 1, 7, 7, 7, 7, 22, 53, 53, 53, 53, 53, 53, 22, 22, 22, 22, 22, 22, 43, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 42, 7, 45, 45, 45, 7, 7, 7, 7, 45, 45, 45, 7, 7, 22, 22, 50, 50, 50, 50, 50, 50, 22, 22, 22, 22, 22, 22, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 41, 2, 45, 1, 45, 7, 7, 3, 7, 45, 5, 45, 7, 1, 31, 25, 25, 25, 25, 25, 25, 26, 22, 22, 22, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 7, 45, 45, 45, 12, 7, 7, 7, 45, 45, 45, 7, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 3, 7, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 2, 7, 7, 10, 7, 45, 45, 45, 6, 7, 7, 7, 8, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 25, 25, 26, 7, 7, 5, 7, 7, 45, 1, 45, 7, 7, 2, 7, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 17, 13, 14, 13, 18, 13, 16, 13, 19, 13, 17, 13, 13, 13, 13, 13, 7, 7, 7, 7, 7, 45, 45, 45, 7, 2, 7, 7, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 7, 3, 7, 1, 7, 12, 7, 11, 7, 9, 7, 13, 13, 13, 13, 1, 7, 7, 8, 7, 7, 7, 7, 7, 7, 10, 7, 2, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13, 14, 13, 13, 7, 45, 45, 45, 7, 8, 7, 9, 7, 45, 45, 45, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 18, 15, 15, 18, 15, 19, 15, 17, 58, 58, 58, 44, 58, 58, 58, 44, 58, 58, 58, 13, 13, 17, 13, 2, 45, 11, 45, 7, 7, 7, 7, 8, 45, 9, 45, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 24, 25, 25, 25, 26, 7, 7, 44, 1, 7, 6, 7, 7, 2, 7, 5, 7, 2, 3, 6, 7, 1, 7, 7, 7, 3, 7, 7, 7, 45, 45, 45, 7, 5, 7, 7, 7, 45, 45, 45, 7, 55, 55, 55, 55, 55, 55, 55, 55, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 58, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 24, 25, 25, 25, 25, 25, 25, 26, 7, 7, 7, 6, 7, 8, 3, 7, 7, 7, 7, 11, 7, 7, 1, 7, 6, 17, 19, 20, 19, 18, 20, 17, 16, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 19, 58, 50, 51, 50, 50, 51, 51, 50, 50, 51, 50, 47, 47, 47, 47, 47, 47, 47, 47, 24, 25, 25, 25, 29, 24, 25, 25, 25, 25, 25, 25, 25, 29, 31, 25, 25, 25, 25, 25, 25, 25, 25, 26, 31, 30, 30, 30, 30, 26, 22, 15, 15, 15, 15, 16, 1, 7, 7, 7, 7, 8, 7, 9, 7, 4, 7, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 18, 7, 58, 3, 58, 7, 44, 7, 58, 7, 58, 7, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 17, 7, 11, 7, 7, 8, 7, 7, 7, 7, 7, 7, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 58, 7, 44, 7, 58, 7, 58, 7, 44, 7, 58, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 19, 1, 7, 3, 7, 7, 7, 7, 10, 7, 7, 7, 48, 49, 47, 48, 47, 49, 47, 47, 15, 15, 15, 15, 15, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 7, 58, 7, 58, 7, 58, 1, 58, 7, 58, 7, 7, 7, 8, 7, 58, 58, 7, 7, 7, 7, 7, 7, 3, 53, 53, 53, 53, 53, 53, 53, 53, 53, 47, 47, 47, 49, 47, 48, 47, 49, 47, 48, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 7, 9, 7, 7, 6, 7, 7, 7, 5, 7, 7, 24, 25, 25, 25, 25, 26, 7, 1, 7, 7, 2, 7, 7, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 17, 58, 7, 44, 7, 58, 7, 58, 7, 44, 8, 58, 48, 47, 47, 47, 47, 47, 7, 7, 7, 7, 7, 7, 7, 53, 53, 53, 53, 53, 53, 53, 53, 53, 7, 7, 3, 7, 7, 7, 8, 7, 7, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 18, 7, 3, 7, 7, 7, 7, 5, 7, 7, 7, 7, 47, 47, 47, 47, 47, 48, 7, 8, 7, 3, 7, 7, 4, 53, 53, 53, 53, 53, 53, 53, 53, 53, 7, 7, 7, 7, 7, 7, 7, 7, 3, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 7, 58, 7, 58, 7, 58, 7, 58, 7, 58, 7, 47, 47, 47, 47, 47, 47, 7, 7, 7, 7, 7, 7, 7, 53, 53, 53, 53, 53, 53, 53, 53, 50, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 18, 2, 7, 7, 8, 7, 7, 7, 2, 7, 7, 8, 48, 49, 47, 47, 47, 48, 7, 12, 7, 7, 58, 58, 58, 53, 53, 53, 53, 53, 53, 53, 53, 53, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 16, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 7, 7, 7, 7, 58, 58, 58, 53, 51, 53, 52, 53, 53, 51, 51, 52, 5, 7, 8, 7, 7, 1, 7, 7, 7, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 7, 7, 7, 8, 58, 58, 58, 58, 58, 58, 7, 58, 7, 44, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 17, 16, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 13, 13, 13, 13, 13, 13, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 17, 13, 19, 13, 13, 13, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 3, 7, 7, 7, 6, 7, 7, 7, 18, 57, 20, 18, 18, 18, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15, 15, 15, 15, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22
        ];
        
        this.tileMap = [];
        this.enemies = [];
        this.deadZombies = [];
        this.items = [];
        this.blood = [];
        this.maxCorpses = 30;
        this.maxBlood = 50;

        for (var a = 0; a < this.rows * this.cols; a++) {
            var x = a % this.cols;
            var y = Math.floor(a / this.cols);
            if (this.map[a] === CRATE_TYPE || this.map[a] === CRATE_TYPE_NO_ITEM) {
                this.tileMap[a] = new Crate(x, y, this.tileWidth, this.tileHeight, this, this.map[a] === CRATE_TYPE);
            } else if (this.map[a] === BARREL_TYPE) {
                this.tileMap[a] = new Barrel(x, y, this.tileWidth, this.tileHeight, this);
            } else if (this.map[a] === EXIT_TYPE) {
                this.tileMap[a] = new Exit(x, y, this.tileWidth, this.tileHeight, this);
            } else {
                this.tileMap[a] = new Tile(x, y, this.tileWidth, this.tileHeight, this.map[a]);
            }
        }
        
        var zombieKillerWidth = this.tileWidth * 0.5;
        var zombieKillerHeight = this.tileHeight * 0.5;
        
        var canvasWidth = Config.getInstance().canvasWidth;
        var canvasHeight = Config.getInstance().canvasHeight;
        var xOffset = canvasWidth / 2 - zombieKillerWidth / 2;
        var yOffset = canvasHeight / 2 - zombieKillerHeight / 2;
        var origX = this.startX * this.tileWidth;
        var origY = this.startY * this.tileHeight;
        var newOffsetX = xOffset - origX - this.tileWidth / 2 + zombieKillerWidth / 2;
        var newOffsetY = yOffset - origY - this.tileHeight / 2 + zombieKillerHeight / 2;
        
        this.zombieKiller = new ZombieKiller(xOffset, yOffset, zombieKillerWidth, zombieKillerHeight, this);
        this.camera.init(5, 4, newOffsetX, newOffsetY);
        
        var zombieSize = this.tileWidth * 0.8;
        this.enemies.push(new Zombie(10 * this.tileWidth + this.tileWidth / 2, 5 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 20, 2, 2));
        
        this.enemies.push(new Zombie(16 * this.tileWidth + this.tileWidth / 2, 4 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 20, 2, 2));
        this.enemies.push(new Zombie(17 * this.tileWidth + this.tileWidth / 2, 4 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 20, 2, 2));
        this.enemies.push(new Zombie(20 * this.tileWidth + this.tileWidth / 2, 5 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1, 20, 2, 2));
        
        this.enemies.push(new Zombie(13 * this.tileWidth + this.tileWidth / 2, 7 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 3, 20, 2, 3));
        this.enemies.push(new Zombie(16 * this.tileWidth + this.tileWidth / 2, 8 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 20, 2, 3));
        this.enemies.push(new Zombie(13 * this.tileWidth + this.tileWidth / 2, 11 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.3, 20, 2, 3));
        
        this.enemies.push(new Zombie(16 * this.tileWidth + this.tileWidth / 2, 26 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 30, 2, 2));
        this.enemies.push(new Zombie(17 * this.tileWidth + this.tileWidth / 2, 23 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.6, 30, 2, 3));
        
        this.enemies.push(new Zombie(16 * this.tileWidth + this.tileWidth / 2, 30 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.9, 30, 2, 1));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 32 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 30, 2, 3));
        
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 34 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 30, 2, 2));
        this.enemies.push(new Zombie(19 * this.tileWidth + this.tileWidth / 2, 24 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 3, 30, 2, 3));
        this.enemies.push(new Zombie(19 * this.tileWidth + this.tileWidth / 2, 33 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.7, 30, 2, 1));
        
        zombieSize = this.tileWidth;
        this.enemies.push(new Zombie(23 * this.tileWidth + this.tileWidth / 2, 33 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 30, 2, 3));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 36 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.3, 30, 2, 3));
        
        zombieSize = this.tileWidth * 1.2;
        this.enemies.push(new Zombie(26 * this.tileWidth + this.tileWidth / 2, 21 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.8, 30, 2, 2));
        this.enemies.push(new Zombie(31 * this.tileWidth + this.tileWidth / 2, 25 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.5, 30, 2, 3));
        
        this.enemies.push(new Zombie(33 * this.tileWidth + this.tileWidth / 2, 38 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 30, 2, 2));
        
        var snakeSize = this.tileWidth * 0.9;
        this.enemies.push(new ZombieSnake(12 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 10 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 10, 1, 1, 4, this.tileWidth * 1));
        this.enemies.push(new ZombieSnake(15 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 13 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 10, 1.5, .5, 4, this.tileWidth * 1));
        this.enemies.push(new ZombieSnake(12 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 16 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 10, 1, 1, 4, this.tileWidth * 1));
        this.enemies.push(new ZombieSnake(15 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 17 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 10, 1.5, .8, 4, this.tileWidth * 1));
        
        snakeSize = this.tileWidth * 1.1;
        this.enemies.push(new ZombieSnake(37 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 47 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 15, 1, 1, 5, this.tileWidth * 3));
        this.enemies.push(new ZombieSnake(38 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 55 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 15, 1.5, 1.5, 5, this.tileWidth * 2));
        this.enemies.push(new ZombieSnake(30 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 55 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 15, 0.8, 2, 5, this.tileWidth * 1));
        this.enemies.push(new ZombieSnake(34 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 51 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 15, 1, 1.4, 5, this.tileWidth * 2.5));
        this.enemies.push(new ZombieSnake(30 * this.tileWidth + this.tileWidth / 2 - snakeSize / 2, 47 * this.tileHeight + this.tileHeight / 2 - snakeSize / 2, snakeSize, snakeSize, this, 15, 1.5, 1.7, 5, this.tileWidth * 1.5));
        
        this.enemies.push(new Zombie(34 * this.tileWidth + this.tileWidth / 2, 56 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.9, 35, 2, 2));
        this.enemies.push(new Zombie(30 * this.tileWidth + this.tileWidth / 2, 51 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2, 35, 2, 3));
        this.enemies.push(new Zombie(34 * this.tileWidth + this.tileWidth / 2, 47 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.7, 35, 2, 1));
        this.enemies.push(new Zombie(38 * this.tileWidth + this.tileWidth / 2, 51 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 3, 35, 2, 3));
        
        var eyeSize = this.tileWidth * 1.2;
        this.enemies.push(new Eye(22 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 54 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 0.8, this.tileWidth * 6));
        this.enemies.push(new Eye(20 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 54 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 1.2, this.tileWidth * 6));
        this.enemies.push(new Eye(18 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 54 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 0.8, this.tileWidth * 6));
        this.enemies.push(new Eye(16 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 54 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 1.2, this.tileWidth * 6));
        this.enemies.push(new Eye(14 * this.tileWidth + this.tileWidth / 2 - eyeSize / 2, 54 * this.tileHeight + this.tileHeight / 2 - eyeSize / 2, eyeSize, eyeSize, this, 1, this.tileWidth * 6));
        
        zombieSize = this.tileWidth * 0.9;
        this.enemies.push(new Zombie(6 * this.tileWidth + this.tileWidth / 2, 61 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 10, 2, 0));
        this.enemies.push(new Zombie(8 * this.tileWidth + this.tileWidth / 2, 61 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.4, 10, 2, 0));
        this.enemies.push(new Zombie(10 * this.tileWidth + this.tileWidth / 2, 61 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.3, 10, 2, 0));
        this.enemies.push(new Zombie(12 * this.tileWidth + this.tileWidth / 2, 61 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.6, 10, 2, 0));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 61 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.2, 10, 2, 0));
        
        this.enemies.push(new Zombie(6 * this.tileWidth + this.tileWidth / 2, 63 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 10, 2, 0));
        this.enemies.push(new Zombie(8 * this.tileWidth + this.tileWidth / 2, 63 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 10, 2, 0));
        this.enemies.push(new Zombie(10 * this.tileWidth + this.tileWidth / 2, 63 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.2, 10, 2, 0));
        this.enemies.push(new Zombie(12 * this.tileWidth + this.tileWidth / 2, 63 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.4, 10, 2, 0));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 63 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.3, 10, 2, 0));
        
        this.enemies.push(new Zombie(6 * this.tileWidth + this.tileWidth / 2, 65 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 10, 2, 0));
        this.enemies.push(new Zombie(8 * this.tileWidth + this.tileWidth / 2, 65 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 10, 2, 0));
        this.enemies.push(new Zombie(10 * this.tileWidth + this.tileWidth / 2, 65 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.1, 10, 2, 0));
        this.enemies.push(new Zombie(12 * this.tileWidth + this.tileWidth / 2, 65 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.2, 10, 2, 0));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 65 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 10, 2, 0));
        
        this.enemies.push(new Zombie(6 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth, 10, 2, 0));
        this.enemies.push(new Zombie(8 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.5, 10, 2, 0));
        this.enemies.push(new Zombie(10 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.3, 10, 2, 0));
        this.enemies.push(new Zombie(12 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.4, 10, 2, 0));
        this.enemies.push(new Zombie(14 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 1.1, 10, 2, 0));
        
        zombieSize = this.tileWidth * 2.5;
        this.enemies.push(new Zombie(25 * this.tileWidth + this.tileWidth / 2, 67 * this.tileHeight + this.tileHeight / 2, zombieSize, zombieSize, this, this.tileWidth * 2.8, 150, 4, 2));
        
        this.events = [new StartEvent(this), new BossFight2Event(this)];
    }
}

